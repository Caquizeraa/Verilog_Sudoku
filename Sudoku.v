
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Sudoku(

	//////////// CLOCK //////////
	input 		          		MAX10_CLK1_50,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
	
	output [0:9] LEDR,
	
	//////////// SEG7: 3.3-V LVTTL //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5
);


	// signal declaration
	wire clk, async_rstn, sync_rstn, video_on, pixel_tick, keyEnter, keyReset;
	wire [9:0] pixel_x, pixel_y;
	reg [11:0] rgb_reg;
	wire [11:0] rgb_next;

	assign clk = MAX10_CLK1_50;

	 
	EdgeDetector EnterKey (.clk(clk), 
									.rstn(1), 
									.trigger(~KEY[1]), 
									.pulse(keyEnter));
									
	EdgeDetector ResetKey (.clk(clk), 
									.rstn(1), 
									.trigger(~KEY[0]), 
									.pulse(keyReset));
									

	// instantiate vga sync circuit
	VGASync vsync_unit (.clk(clk), 
								.rstn(1), 
								.hsync(VGA_HS), 
								.vsync(VGA_VS), 
								.video_on(video_on), 
								.p_tick(pixel_tick), 
								.pixel_x(pixel_x), 
								.pixel_y(pixel_y));
	
	PixelGen px_gen (.clk(clk), 
						  .rstn(1), 
						  .video_on(video_on),
						  .p_tick(pixel_tick),
						  .keyEnter(keyEnter),
						  .keyReset(keyReset),
						  .pixel_x(pixel_x), 
						  .pixel_y(pixel_y),
						  .sw(SW[9:0]),
						  .leds(LEDR),
						  .r(rgb_next[11:8]), 
						  .g(rgb_next[7:4]), 
						  .b(rgb_next[3:0]),
						  .h5(HEX5),
						  .h4(HEX4),
						  .h3(HEX3),
						  .h2(HEX2),
						  .h1(HEX1),
						  .h0(HEX0));
					
						  
	// rgb buffer
	always@(posedge clk)
		if(pixel_tick)
			rgb_reg <= rgb_next;
	// output
	assign {VGA_R, VGA_G, VGA_B} = rgb_reg;

endmodule
